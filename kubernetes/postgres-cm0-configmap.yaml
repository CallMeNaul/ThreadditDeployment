apiVersion: v1
data:
  schema.sql: "CREATE TABLE public.comments (\n    id integer NOT NULL,\n    user_id integer NOT NULL,\n    post_id integer NOT NULL,\n    parent_id integer,\n    has_parent boolean,\n    content text NOT NULL,\n    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,\n    is_edited boolean DEFAULT false\n);\n\n\nCREATE TABLE public.posts (\n    id integer NOT NULL,\n    user_id integer NOT NULL,\n    subthread_id integer NOT NULL,\n    title text NOT NULL,\n    media text,\n    content text,\n    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,\n    is_edited boolean DEFAULT false\n);\n\n\nCREATE TABLE public.reactions (\n    id integer NOT NULL,\n    user_id integer NOT NULL,\n    post_id integer,\n    comment_id integer,\n    is_upvote boolean NOT NULL,\n    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP\n);\n\n\nCREATE TABLE public.users (\n    id integer NOT NULL,\n    username text NOT NULL,\n    password_hash text NOT NULL,\n    email text NOT NULL,\n    avatar text,\n    bio text,\n    registration_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP\n);\n\n\nCREATE VIEW public.comment_info AS\n SELECT c.id AS comment_id,\n    u.username AS user_name,\n    u.avatar AS user_avatar,\n    ckarma.comment_karma,\n    c.has_parent,\n    c.parent_id,\n    c.is_edited,\n    c.content,\n    c.created_at,\n    p.id AS post_id\n   FROM (((public.posts p\n     FULL JOIN public.comments c ON ((c.post_id = p.id)))\n     FULL JOIN ( SELECT c_1.id AS comment_id,\n            COALESCE(sum(\n                CASE\n                    WHEN (r.is_upvote = true) THEN 1\n                    WHEN (r.is_upvote = false) THEN '-1'::integer\n                    ELSE 0\n                END), (0)::bigint) AS comment_karma\n           FROM (public.comments c_1\n             FULL JOIN public.reactions r ON ((r.comment_id = c_1.id)))\n          GROUP BY c_1.id\n         HAVING (c_1.id IS NOT NULL)) ckarma ON ((ckarma.comment_id = c.id)))\n     FULL JOIN public.users u ON ((u.id = c.user_id)));\n\nCREATE SEQUENCE public.comments_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\nALTER SEQUENCE public.comments_id_seq OWNED BY public.comments.id;\n\nCREATE TABLE public.messages (\n    id integer NOT NULL,\n    sender_id integer NOT NULL,\n    receiver_id integer NOT NULL,\n    content text NOT NULL,\n    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,\n    seen boolean DEFAULT false NOT NULL,\n    seen_at timestamp with time zone\n);\n\nCREATE SEQUENCE public.messages_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\nALTER SEQUENCE public.messages_id_seq OWNED BY public.messages.id;\n\nCREATE TABLE public.subthreads (\n    id integer NOT NULL,\n    name character varying(20) NOT NULL,\n    description text,\n    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,\n    logo text,\n    created_by integer\n);\n\nCREATE VIEW public.post_info AS\n SELECT t.id AS thread_id,\n    t.name AS thread_name,\n    t.logo AS thread_logo,\n    p.id AS post_id,\n    k.karma AS post_karma,\n    p.title,\n    p.media,\n    p.is_edited,\n    p.content,\n    p.created_at,\n    u.id AS user_id,\n    u.username AS user_name,\n    u.avatar AS user_avatar,\n    c.comments_count\n   FROM ((((public.posts p\n     JOIN ( SELECT p_1.id AS post_id,\n            COALESCE(sum(\n                CASE\n                    WHEN (r.is_upvote = true) THEN 1\n                    WHEN (r.is_upvote = false) THEN '-1'::integer\n                    ELSE 0\n                END), (0)::bigint) AS karma\n           FROM (public.posts p_1\n             FULL JOIN public.reactions r ON ((r.post_id = p_1.id)))\n          GROUP BY p_1.id) k ON ((k.post_id = p.id)))\n     JOIN ( SELECT p_1.id AS post_id,\n            count(c_1.id) AS comments_count\n           FROM (public.posts p_1\n             FULL JOIN public.comments c_1 ON ((c_1.post_id = p_1.id)))\n          GROUP BY p_1.id) c ON ((c.post_id = p.id)))\n     JOIN public.subthreads t ON ((t.id = p.subthread_id)))\n     JOIN public.users u ON ((u.id = p.user_id)));\n\nCREATE SEQUENCE public.posts_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\nALTER SEQUENCE public.posts_id_seq OWNED BY public.posts.id;\n\nCREATE SEQUENCE public.reactions_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\nALTER SEQUENCE public.reactions_id_seq OWNED BY public.reactions.id;\n\nCREATE TABLE public.roles (\n    id integer NOT NULL,\n    name text NOT NULL,\n    slug text NOT NULL\n);\n\nCREATE SEQUENCE public.roles_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\nALTER SEQUENCE public.roles_id_seq OWNED BY public.roles.id;\n\nCREATE TABLE public.saved (\n    id integer NOT NULL,\n    user_id integer NOT NULL,\n    post_id integer NOT NULL,\n    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE SEQUENCE public.saved_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\nALTER SEQUENCE public.saved_id_seq OWNED BY public.saved.id;\n\nCREATE TABLE public.subscriptions (\n    id integer NOT NULL,\n    user_id integer  NOT NULL,\n    subthread_id integer  NOT NULL,\n    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE SEQUENCE public.subscriptions_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\nALTER SEQUENCE public.subscriptions_id_seq OWNED BY public.subscriptions.id;\n\nCREATE VIEW public.subthread_info AS\n SELECT subthreads.id,\n    subthreads.name,\n    subthreads.logo,\n    mcount.members_count,\n    pcount.posts_count,\n    ccount.comments_count\n   FROM (((public.subthreads\n     FULL JOIN ( SELECT subthreads_1.id AS subthread_id,\n            count(*) AS members_count\n           FROM (public.subthreads subthreads_1\n             JOIN public.subscriptions ON ((subscriptions.subthread_id = subthreads_1.id)))\n          GROUP BY subthreads_1.id) mcount ON ((mcount.subthread_id = subthreads.id)))\n     FULL JOIN ( SELECT subthreads_1.id AS subthread_id,\n            count(*) AS posts_count\n           FROM (public.subthreads subthreads_1\n             JOIN public.posts ON ((posts.subthread_id = subthreads_1.id)))\n          GROUP BY subthreads_1.id) pcount ON ((pcount.subthread_id = subthreads.id)))\n     FULL JOIN ( SELECT subthreads_1.id AS subthread_id,\n            count(*) AS comments_count\n           FROM ((public.subthreads subthreads_1\n             JOIN public.posts ON ((posts.subthread_id = subthreads_1.id)))\n             JOIN public.comments ON ((comments.post_id = posts.id)))\n          GROUP BY subthreads_1.id) ccount ON ((ccount.subthread_id = subthreads.id)));\n\nCREATE SEQUENCE public.subthreads_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\nALTER SEQUENCE public.subthreads_id_seq OWNED BY public.subthreads.id;\n\nCREATE VIEW public.user_info AS\n SELECT u.id AS user_id,\n    (c.karma + p.karma) AS user_karma,\n    c.comments_count,\n    c.karma AS comments_karma,\n    p.posts_count,\n    p.karma AS posts_karma\n   FROM ((public.users u\n     JOIN ( SELECT u_1.id AS user_id,\n            count(c_1.id) AS comments_count,\n            COALESCE(sum(\n                CASE\n                    WHEN ((r.is_upvote = true) AND (r.comment_id IS NOT NULL)) THEN 1\n                    WHEN ((r.is_upvote = false) AND (r.comment_id IS NOT NULL)) THEN '-1'::integer\n                    ELSE 0\n                END), (0)::bigint) AS karma\n           FROM ((public.users u_1\n             FULL JOIN public.comments c_1 ON ((c_1.user_id = u_1.id)))\n             FULL JOIN public.reactions r ON ((r.comment_id = c_1.id)))\n          GROUP BY u_1.id) c ON ((c.user_id = u.id)))\n     JOIN ( SELECT u_1.id AS user_id,\n            count(p_1.id) AS posts_count,\n            COALESCE(sum(\n                CASE\n                    WHEN ((r.is_upvote = true) AND (r.post_id IS NOT NULL)) THEN 1\n                    WHEN ((r.is_upvote = false) AND (r.post_id IS NOT NULL)) THEN '-1'::integer\n                    ELSE 0\n                END), (0)::bigint) AS karma\n           FROM ((public.users u_1\n             FULL JOIN public.posts p_1 ON ((p_1.user_id = u_1.id)))\n             FULL JOIN public.reactions r ON ((r.post_id = p_1.id)))\n          GROUP BY u_1.id) p ON ((p.user_id = u.id)));\n\nCREATE TABLE public.user_roles (\n    id integer NOT NULL,\n    user_id integer NOT NULL,\n    role_id integer NOT NULL,\n    subthread_id integer,\n    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE SEQUENCE public.user_roles_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\nALTER SEQUENCE public.user_roles_id_seq OWNED BY public.user_roles.id;\n\nCREATE SEQUENCE public.users_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\nALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;\n\nALTER TABLE ONLY public.comments ALTER COLUMN id SET DEFAULT nextval('public.comments_id_seq'::regclass);\n\nALTER TABLE ONLY public.messages ALTER COLUMN id SET DEFAULT nextval('public.messages_id_seq'::regclass);\n\nALTER TABLE ONLY public.posts ALTER COLUMN id SET DEFAULT nextval('public.posts_id_seq'::regclass);\n\nALTER TABLE ONLY public.reactions ALTER COLUMN id SET DEFAULT nextval('public.reactions_id_seq'::regclass);\n\nALTER TABLE ONLY public.roles ALTER COLUMN id SET DEFAULT nextval('public.roles_id_seq'::regclass);\n\nALTER TABLE ONLY public.saved ALTER COLUMN id SET DEFAULT nextval('public.saved_id_seq'::regclass);\n\nALTER TABLE ONLY public.subscriptions ALTER COLUMN id SET DEFAULT nextval('public.subscriptions_id_seq'::regclass);\n\nALTER TABLE ONLY public.subthreads ALTER COLUMN id SET DEFAULT nextval('public.subthreads_id_seq'::regclass);\n\nALTER TABLE ONLY public.user_roles ALTER COLUMN id SET DEFAULT nextval('public.user_roles_id_seq'::regclass);\n\nALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);\n\nALTER TABLE ONLY public.comments\n    ADD CONSTRAINT comments_pkey PRIMARY KEY (id);\n\nALTER TABLE ONLY public.messages\n    ADD CONSTRAINT messages_pkey PRIMARY KEY (id);\n\nALTER TABLE ONLY public.posts\n    ADD CONSTRAINT posts_pkey PRIMARY KEY (id);\n\nALTER TABLE ONLY public.reactions\n    ADD CONSTRAINT reactions_pkey PRIMARY KEY (id);\n\nALTER TABLE ONLY public.reactions\n    ADD CONSTRAINT reactions_user_id_comment_id_key UNIQUE (user_id, comment_id);\n\nALTER TABLE ONLY public.reactions\n    ADD CONSTRAINT reactions_user_id_post_id_key UNIQUE (user_id, post_id);\n\nALTER TABLE ONLY public.roles\n    ADD CONSTRAINT roles_name_key UNIQUE (name);\n\nALTER TABLE ONLY public.roles\n    ADD CONSTRAINT roles_pkey PRIMARY KEY (id);\n\nALTER TABLE ONLY public.roles\n    ADD CONSTRAINT roles_slug_key UNIQUE (slug);\n\nALTER TABLE ONLY public.saved\n    ADD CONSTRAINT saved_pkey PRIMARY KEY (id);\n\nALTER TABLE ONLY public.saved\n    ADD CONSTRAINT saved_user_id_post_id_key UNIQUE (user_id, post_id);\n\nALTER TABLE ONLY public.subscriptions\n    ADD CONSTRAINT subscriptions_pkey PRIMARY KEY (id);\n    \nALTER TABLE ONLY public.subscriptions\n    ADD CONSTRAINT subscriptions_user_id_subthread_id_key UNIQUE (user_id, subthread_id);\n\nALTER TABLE ONLY public.subthreads\n    ADD CONSTRAINT subthreads_name_key UNIQUE (name);\n\nALTER TABLE ONLY public.subthreads\n    ADD CONSTRAINT subthreads_pkey PRIMARY KEY (id);\n\nALTER TABLE ONLY public.user_roles\n    ADD CONSTRAINT user_roles_pkey PRIMARY KEY (id);\n\nALTER TABLE ONLY public.user_roles\n    ADD CONSTRAINT user_roles_user_id_role_id_subthread_id_key UNIQUE (user_id, role_id, subthread_id);\n\nALTER TABLE ONLY public.users\n    ADD CONSTRAINT users_email_key UNIQUE (email);\n\nALTER TABLE ONLY public.users\n    ADD CONSTRAINT users_pkey PRIMARY KEY (id);\n\nALTER TABLE ONLY public.users\n    ADD CONSTRAINT users_username_key UNIQUE (username);\n\nALTER TABLE ONLY public.comments\n    ADD CONSTRAINT comments_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES public.comments(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n\nALTER TABLE ONLY public.comments\n    ADD CONSTRAINT comments_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.posts(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n\nALTER TABLE ONLY public.comments\n    ADD CONSTRAINT comments_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n\nALTER TABLE ONLY public.messages\n    ADD CONSTRAINT messages_receiver_id_fkey FOREIGN KEY (receiver_id) REFERENCES public.users(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n\nALTER TABLE ONLY public.messages\n    ADD CONSTRAINT messages_sender_id_fkey FOREIGN KEY (sender_id) REFERENCES public.users(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n\nALTER TABLE ONLY public.posts\n    ADD CONSTRAINT posts_subthread_id_fkey FOREIGN KEY (subthread_id) REFERENCES public.subthreads(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n\nALTER TABLE ONLY public.posts\n    ADD CONSTRAINT posts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n\nALTER TABLE ONLY public.reactions\n    ADD CONSTRAINT reactions_comment_id_fkey FOREIGN KEY (comment_id) REFERENCES public.comments(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n\nALTER TABLE ONLY public.reactions\n    ADD CONSTRAINT reactions_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.posts(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n\nALTER TABLE ONLY public.reactions\n    ADD CONSTRAINT reactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n\nALTER TABLE ONLY public.saved\n    ADD CONSTRAINT saved_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.posts(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n\nALTER TABLE ONLY public.saved\n    ADD CONSTRAINT saved_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n\nALTER TABLE ONLY public.subscriptions\n    ADD CONSTRAINT subscriptions_subthread_id_fkey FOREIGN KEY (subthread_id) REFERENCES public.subthreads(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n\nALTER TABLE ONLY public.subscriptions\n    ADD CONSTRAINT subscriptions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n    \nALTER TABLE ONLY public.subthreads\n    ADD CONSTRAINT subthreads_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id) ON UPDATE CASCADE ON DELETE SET NULL NOT VALID;\n\nALTER TABLE ONLY public.user_roles\n    ADD CONSTRAINT user_roles_role_id_fkey FOREIGN KEY (role_id) REFERENCES public.roles(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n\nALTER TABLE ONLY public.user_roles\n    ADD CONSTRAINT user_roles_subthread_id_fkey FOREIGN KEY (subthread_id) REFERENCES public.subthreads(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n\nALTER TABLE ONLY public.user_roles\n    ADD CONSTRAINT user_roles_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;\n\nINSERT INTO roles(name, slug) VALUES \n\t('Thread Moderator','mod'),\n\t('Administrator', 'admin');"
kind: ConfigMap
metadata:
  namespace: threaddit
  annotations:
    use-subpath: "true"
  labels:
    app: postgres
  name: postgres-cm0
